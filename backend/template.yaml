AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  running-log
  Running Log Application Backend

Globals:
  Function:
    Timeout: 30
    MemorySize: 512
    Runtime: python3.13
    Environment:
      Variables:
        RUNS_TABLE: !Ref RunsTable
        USERS_TABLE: !Ref UsersTable  
        TARGETS_TABLE: !Ref TargetsTable
        COGNITO_USER_POOL_ID: !Ref RunningLogUserPool     
        COGNITO_CLIENT_ID: !Ref RunningLogUserPoolClient  
        JWT_SECRET: "your-jwt-secret-key"                 
  Api:
    Cors:
      AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: "'*'"

Resources:
  RunsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/runs/
      Handler: app.lambda_handler
      Runtime: python3.13
      Environment:
        Variables:
          RUNS_TABLE: !Ref RunsTable
          USERS_TABLE: !Ref UsersTable
          TARGETS_TABLE: !Ref TargetsTable
      Events:
        # Handle the root path specifically
        RootApi:
          Type: Api
          Properties:
            Path: /
            Method: ANY
        # Handle all other paths
        RunsApi:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref RunsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
        - DynamoDBCrudPolicy:
            TableName: !Ref TargetsTable
        # Add Cognito permissions:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminInitiateAuth
                - cognito-idp:AdminCreateUser
                - cognito-idp:AdminSetUserPassword
                - cognito-idp:GetUser
                - cognito-idp:ListUsers
              Resource: !GetAtt RunningLogUserPool.Arn

  # DynamoDB Tables
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-Users"
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: email-index
          KeySchema:
            - AttributeName: email
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST

  RunsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-Runs"
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: run_id
          AttributeType: S
        - AttributeName: run_date
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
        - AttributeName: run_id
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: user-date-index
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
            - AttributeName: run_date
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST

  TargetsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-Targets"
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: target_id
          AttributeType: S
        - AttributeName: period
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
        - AttributeName: target_id
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: user-period-index
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
            - AttributeName: period
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST

# Cognito User Pool for authentication
  RunningLogUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "${AWS::StackName}-user-pool"
      # Allow users to sign in with email
      UsernameAttributes:
        - email
      # Password policy
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
      # Auto-verified attributes
      AutoVerifiedAttributes:
        - email
      # Email verification settings
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_CODE
        EmailSubject: "Running Log - Verify your email"
        EmailMessage: "Welcome to Running Log! Your verification code is {####}"
      # User attributes schema
      Schema:
        - Name: email
          AttributeDataType: String
          Required: true
          Mutable: true
        - Name: given_name
          AttributeDataType: String
          Required: true
          Mutable: true
        - Name: family_name
          AttributeDataType: String
          Required: true
          Mutable: true

  # Cognito User Pool Client (for your app to connect)
  RunningLogUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref RunningLogUserPool
      ClientName: !Sub "${AWS::StackName}-client"
      # Don't generate client secret (for public clients like web/mobile apps)
      GenerateSecret: false
      # Token validity periods
      AccessTokenValidity: 1  # 1 day
      IdTokenValidity: 1      # 1 day
      RefreshTokenValidity: 30 # 30 days
      TokenValidityUnits:
        AccessToken: days
        IdToken: days
        RefreshToken: days
      # Allowed OAuth flows
      ExplicitAuthFlows:
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      # Prevent user existence errors (security)
      PreventUserExistenceErrors: ENABLED

Outputs:
  RunsApi:
    Description: "API Gateway endpoint URL for Prod stage for Runs function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  RunsFunction:
    Description: "Runs Lambda Function ARN"
    Value: !GetAtt RunsFunction.Arn
  RunsFunctionIamRole:
    Description: "Implicit IAM Role created for Runs function"
    Value: !GetAtt RunsFunctionRole.Arn

  CognitoUserPoolId:
    Description: "Cognito User Pool ID"
    Value: !Ref RunningLogUserPool
    Export:
      Name: !Sub "${AWS::StackName}-UserPoolId"
      
  CognitoClientId:
    Description: "Cognito User Pool Client ID"
    Value: !Ref RunningLogUserPoolClient
    Export:
      Name: !Sub "${AWS::StackName}-ClientId"
      
  CognitoUserPoolArn:
    Description: "Cognito User Pool ARN"
    Value: !GetAtt RunningLogUserPool.Arn